{
  "compilerOptions": {
    /* Основные параметры */
    // "incremental": true,                   /* Включить инкрементную компиляцию */
    "target": "es5",                          /* Укажите целевую версию ECMAScript: "ES3" (по умолчанию), "ES5", "ES2015", "ES2016", "ES2017", "ES2018", "ES2019" или "ESNEXT". */
    "module": "commonjs",                     /* Укажите генерацию кода модуля: "none", "commonjs", "amd", "system", "umd", "es2015" или "ESNext". */
    // "lib": [],                             /* Указываем файлы библиотеки для включения в компиляцию. */
    // "allowJs": true,                       /* Разрешить компиляцию файлов javascript. */
    // "checkJs": true,                       /* Сообщить об ошибках в файлах .js. */
    // "jsx": "preserve",                     /* Укажите генерацию кода JSX: "preserve", "react-native" или "react". */
    // "declaration": true,                   /* Генерирует соответствующий файл '.d.ts'. */
    // "declarationMap": true,                /* Генерирует исходную карту для каждого соответствующего файла '.d.ts'. */
    // "sourceMap": true,                     /* Генерирует соответствующий файл '.map'. */
    // "outFile": "./",                       /* Объединить и передать вывод в один файл. */
    "outDir": "dist",                         /* Перенаправить структуру вывода в каталог. */
    "rootDir": "src",                         /* Укажите корневой каталог входных файлов. Используйте для управления структурой выходных каталогов с --outDir. */
    // "composite": true,                     /* Включить компиляцию проекта */
    // "tsBuildInfoFile": "./",               /* Указываем файл для хранения информации об инкрементной компиляции */
    // "removeComments": true,                /* Не выводить комментарии на вывод. */
    // "noEmit": true,                        /* Не генерировать выходные данные. */
    // "importHelpers": true,                 /* Импорт хелперов emit из 'tslib'. */
    // "downlevelIteration": true,            /* Обеспечьте полную поддержку итераций в 'for-of', распределении и деструктурировании при нацеливании на 'ES5' или 'ES3'. */
    // "isolatedModules": true,               /* Транспилировать каждый файл как отдельный модуль (аналогично 'ts.transpileModule'). */

    /* Параметры строгой проверки типов */
    "strict": true,                           /* Включить все параметры строгой проверки типов. */
    // "noImplicitAny": true,                 /* Вызывать ошибку в выражениях и объявлениях с подразумеваемым типом "любой". */
    // "strictNullChecks": true,              /* Включить строгие проверки нуля. */
    // "strictFunctionTypes": true,           /* Включить строгую проверку типов функций. */
    // "strictBindCallApply": true,           /* Включить строгие методы 'bind', 'call' и 'apply' для функций. */
    // "strictPropertyInitialization": true,  /* Включить строгую проверку инициализации свойств в классах. */
    // "noImplicitThis": true,                /* Вызывать ошибку в выражениях this с подразумеваемым типом any. */
    // "alwaysStrict": true,                  /* Анализировать в строгом режиме и выдавать "use strict" для каждого исходного файла. */

    /* Дополнительные проверки */
    // "noUnusedLocals": true,                /* Сообщить об ошибках неиспользуемых локальных переменных. */
    // "noUnusedParameters": true,            /* Сообщить об ошибках неиспользуемых параметров. */
    // "noImplicitReturns": true,             /* Сообщить об ошибке, если не все пути кода в функции возвращают значение. */
    // "noFallthroughCasesInSwitch": true,    /* Сообщить об ошибках для аварийных случаев в операторе switch. */

    /* Параметры разрешения модуля */
    // "moduleResolution": "node",            /* Укажите стратегию разрешения модуля: "узел" (Node.js) или "классический" (TypeScript до версии 1.6). */
    // "baseUrl": "./",                       /* Базовый каталог для разрешения неабсолютных имен модулей. */
    // "paths": {},                           /* Серия записей, которые переназначают импорт в места поиска относительно 'baseUrl'. */
    // "rootDirs": [],                        /* Список корневых папок, объединенное содержимое которых представляет структуру проекта во время выполнения. */
    // "typeRoots": [],                       /* Список папок, из которых следует включать определения типов. */
     "types": ["jest", "node"],               /* Файлы объявлений типов для включения в компиляцию. */
    // "allowSyntheticDefaultImports": true,  /* Разрешить импорт по умолчанию из модулей без экспорта по умолчанию. Это не влияет на генерацию кода, только на проверку типов. */
    "esModuleInterop": true,                  /* Включает взаимодействие между CommonJS и ES Index путем создания объектов пространства имен для всех импортов. Подразумевает «allowSyntheticDefaultImports». */
    // "preserveSymlinks": true,              /* Не разрешать реальный путь символических ссылок. */
    // "allowUmdGlobalAccess": true,          /* Разрешить доступ к глобалам UMD из модулей. */

    /* Параметры исходной карты */
    // "sourceRoot": "",                      /* Укажите расположение, в котором отладчик должен размещать файлы TypeScript вместо исходных расположений. */
    // "mapRoot": "",                         /* Укажите расположение, в котором отладчик должен размещать файлы карт вместо созданных местоположений. */
    // "inlineSourceMap": true,               /* Создать один файл с исходными картами вместо отдельного файла. */
    // "inlineSources": true,                 /* Выдать источник вместе с исходными картами в одном файле; требует установки --inlineSourceMap или --sourceMap. */

    /* Экспериментальные параметры */
    // "experimentalDecorators": true,        /* Включает экспериментальную поддержку декораторов ES7. */
    // "emitDecoratorMetadata": true,         /* Включает экспериментальную поддержку выделения метаданных типа для декораторов. */

    /* Расширенные настройки */
    "forceConsistentCasingInFileNames": true  /* Запретить ссылки в непоследовательном регистре на один и тот же файл. */
  }
}